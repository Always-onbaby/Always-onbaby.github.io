const s="## 逻辑空值合并操作符和逻辑或操作符的区别\n\n`res.rows ?? []` 和 `res.rows || []` 是两种不同的逻辑表达式，它们在处理空值或 falsy 值时有一些区别。\n\n1.  `res.rows ?? []`：这是 Nullish Coalescing 运算符（??）的使用方式。如果 `res.rows` 的值为 `null` 或 `undefined`，则该表达式将返回一个空数组 `[]`。否则，它将返回 `res.rows` 的值。该运算符只在左侧的值为 `null` 或 `undefined` 时才会触发默认值的使用。\n\n2.  `res.rows || []`：这是逻辑或运算符（||）的使用方式。如果 `res.rows` 的值为 falsy（例如 `false`、`0`、空字符串等），则该表达式将返回一个空数组 `[]`。否则，它将返回 `res.rows` 的值。逻辑或运算符在左侧值为 falsy 时会触发默认值的使用。\n\n区别在于对于除了 `null` 和 `undefined` 外的其他 falsy 值（如 `false`、`0`、空字符串等），Nullish Coalescing 运算符仍然会将其视为有效值，而逻辑或运算符会将其视为 falsy 值并触发默认值的使用。\n\n例如，假设 `res.rows` 的值为：\n\n- `null` 或 `undefined`：`res.rows ?? []` 将返回 `[]`，而 `res.rows || []` 也将返回 `[]`。\n- `false`、`0`、空字符串等：`res.rows ?? []` 仍然将返回 `res.rows` 的值（例如 `false`、`0`、空字符串等），而 `res.rows || []` 将返回 `[]`。\n\n因此，如果你希望在 `res.rows` 的值为 `null` 或 `undefined` 时返回默认值 `[]`，而在其他 falsy 值时保留原始值，可以使用 Nullish Coalescing 运算符 `res.rows ?? []`。如果希望在 `res.rows` 的值为任何 falsy 值时返回默认值 `[]`，则可以使用逻辑或运算符 `res.rows || []`。\n";export{s as default};
