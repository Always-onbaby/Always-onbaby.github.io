const r='#### reactive\r\n\r\n`reactive`方法是用来创建一个响应式的数据对象，该 API 也很好的解决了`defineProperty`实现数据响应式的缺陷\r\n\r\n```vue\r\n<template>\r\n  <div id="app">\r\n    <!-- 4. 访问响应式数据对象中的 count  -->\r\n    {{ state.count }}\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive } from "vue";\r\nexport default {\r\n  name: "App",\r\n  setup() {\r\n    const state = reactive({ count: 3 });\r\n    /**3. 将响应式数据对象state return 出去，供template使用 */\r\n    return { state };\r\n  },\r\n};\r\n<\/script>\r\n```\r\n\r\n#### ref\r\n\r\n本质上`ref`就是通过`reactive`包装一个对象，然后是将值传给该对象的`value`属性，这也是每次访问`ref`定义的值都需要`.value`访问的原因,我们可以简单的把`ref({})`理解为`reactive({value:obj})`\r\n\r\n- 基本类型值（`String` 、`Number` 、`Boolean` 等）或单值对象（类似像 `{count: 3}` 这样只有一个属性值的对象）使用 `ref`\r\n- 引用类型值（`Object` 、`Array`）使用 `reactive`\r\n\r\n<!-- 这个基本上是一致的，没有本质上的不同 -->\r\n';export{r as default};
